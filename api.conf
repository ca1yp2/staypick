# --------------------------------------------
# TOSS PAYMENTS 결제 흐름 구성 (프론트 + 백엔드)
# --------------------------------------------

# 1. Payment.jsx → 백엔드로 결제 준비 요청
# - 사용자가 객실, 날짜, 인원 등을 입력하고 "결제하기" 클릭
# - axios로 /api/payments/ready POST 요청 전송
# - orderId, amount, successUrl 등 포함

# 2. 백엔드 → Toss 서버로 결제 준비 요청
# - 백엔드에서 Toss 본사 API (/v1/payments) 호출
# - 결제 준비 정보 전달 → Toss가 결제창 URL 발급

# 3. Toss 결제창 URL 수신 → 프론트에 전달
# - 백엔드는 Toss로부터 결제창 URL 수신
# - 프론트로 다시 전달하여 TossCheckout.jsx로 리디렉션

# 4. TossCheckout.jsx → 결제창 진입
# - 사용자가 Toss 결제창으로 이동
# - 카드정보 입력 후 결제 진행
# - 결제 성공 시 successUrl로 자동 리디렉션

# 5. TossSuccess.jsx → 백엔드에 최종 확인 요청
# - URL로 전달된 paymentKey, orderId 추출
# - axios로 /api/payments/success POST 요청 전송

# 6. 백엔드 → Toss 서버로 결제 승인 요청
# - Toss의 /v1/payments/confirm API 호출
# - paymentKey, orderId 기반 결제 최종 승인 요청

# 7. 예약 정보 DB 저장
# - 결제 승인 결과를 받아 예약 정보를 DB에 저장
# - 숙소, 객실, 체크인/체크아웃, 인원수, 금액 등 포함

# 8. MyReservations.jsx에서 예약 내역 자동 반영
# - 마이페이지에서 사용자가 결제한 예약 내역 확인 가능
# - 상태: "결제 완료", 썸네일/날짜/금액 등 출력

# --------------------------------------------
# Toss 연동 구조의 장점
# --------------------------------------------

# 1. 아키텍처 구조 – 매우 우수
# - 프론트 / 백엔드 / Toss 본사 간 분리가 명확
#   → 유지보수 및 확장성에 유리함
# - Toss 위젯이 아닌 REST API 방식 채택
#   → 결제 흐름 제어권 확보 (실무에서도 선호)
# - 전체 흐름은 다음과 같음:
#   → Payment.jsx → 백엔드 ready 요청
#   → Toss 서버로 결제 생성
#   → 결제창 → confirm 승인
#   → DB 저장 → 마이페이지 연동
#   

# 2. 보안 및 실무 관점 – 신뢰도 높음
# - 결제 승인 API는 백엔드에서 호출
#   → Toss Secret Key 노출 없이 안전
# - 민감 정보(카드번호)는 Toss 창에서 직접 입력
#   → PCI-DSS 등 보안 규정 위반 없음
# - successUrl, failUrl, orderId 등 중요 파라미터도
#   → 모두 백엔드 제어 가능

# 3. 사용자 경험 – 자연스러움
# - 사용자는 Toss 결제창만 경험
#   → 시스템 내부 로직은 백엔드에서 자동 진행
# - 결제 완료 즉시 마이페이지 예약 반영
#   → 신뢰도 및 만족도 상승
# - 실패 시에는 failUrl로 리디렉션 가능
#   → 자연스러운 실패 처리 UX도 설계 가능

# --------------------------------------------
#                  요약
# --------------------------------------------
# - 프론트는 결제 버튼만 실행 → Toss 창 이동
# - 백엔드는 준비 + 승인 + 저장 모든 단계 처리
# - Toss 본사는 결제 보안만 책임
# - 각 계층의 책임이 명확히 분리되어 있음
