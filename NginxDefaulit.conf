# --------------------------------------------
# NGINX 설정: STAYPICK 운영 서버 배포 구성
# AWS EC2에 Nginx + React (프론트) + Spring Boot (백엔드) 통합 구성
# --------------------------------------------

# 프론트엔드 (React)
# - 사용자 UI를 구성하고 화면 렌더링을 담당
# - 사용자가 보는 모든 페이지는 React로 구성됨 (메인, 상세, 마이페이지 등)
# - React Router로 클라이언트 사이드 라우팅 처리 (SPA 방식)
# - axios를 통해 백엔드 API 호출
# - 빌드 결과는 /var/www/html 에 배포됨 → Nginx가 정적 파일로 응답
#  장점: 빠른 화면 렌더링 + 프론트/백 분리 구조로 유지보수 용이

# 백엔드 (Spring Boot)
# - 로그인, 숙소 조회, 예약, 리뷰, 결제 등 모든 비즈니스 로직 담당
# - API 경로는 `/api/**`, 이미지 경로는 `/upload/**` 로 구분되어 요청받음
# - 데이터베이스와 연결되어 실제 정보를 조회/저장
# - Toss Payments 결제 연동도 백엔드에서 수행
#  장점: 백엔드에서 민감한 처리(Toss, DB 등)를 모두 책임지고 처리

# Nginx
# - 웹 서버이자 리버스 프록시 서버로,
#   사용자 요청을 받아서 프론트(static) 또는 백엔드(API)로 전달해주는 역할을 합니다.
# - 또한 HTTPS 보안 처리, 정적 리소스 캐싱, SPA 라우팅 등을 도와주는 중간 관리자 역할을 수행합니다.
# 장점: 하나의 서버로 통합 운영 가능 + 요청 분기 최적화 + 보안 설정 가능

# --------------------------------------------
# 1. HTTPS 적용 (Let's Encrypt SSL 인증서)
# --------------------------------------------
# - HTTPS는 사용자의 모든 요청을 암호화함
# - Toss Payments 등 외부 서비스 연동 시 보안 통신 필수
# - 무료 인증서인 Let's Encrypt로 직접 발급 후 적용
# 장점: 사용자의 개인정보 및 결제 보안 보장 + 실서비스 신뢰도 향상

ssl_certificate     /etc/letsencrypt/live/staypick.duckdns.org/fullchain.pem;
ssl_certificate_key /etc/letsencrypt/live/staypick.duckdns.org/privkey.pem;
include /etc/letsencrypt/options-ssl-nginx.conf;
ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

# --------------------------------------------
# 2. /api 요청 → Spring Boot 백엔드로 전달
# --------------------------------------------
# - 프론트에서 axios로 요청하는 로그인, 예약, 리뷰 등 모든 API 처리
# - 백엔드는 localhost:8081 에서 작동
# 장점: API 트래픽과 정적 요청 분리 -> 성능 및 보안 향상

location ^~ /api/ {
    proxy_pass http://localhost:8081;
    proxy_http_version 1.1;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header Accept "application/json";
    proxy_redirect off;
}

# --------------------------------------------
# 3. /upload 경로 → 백엔드에서 이미지 서빙
# --------------------------------------------
# - 숙소 썸네일, 리뷰 이미지 등 업로드 이미지 요청
# - 이미지 파일은 Spring Boot의 static 경로에서 응답
# 장점: 인증된 경로를 통해 이미지 제공 -> 보안 관리 가능

location ^~ /upload/ {
    proxy_pass http://localhost:8081;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
}

# --------------------------------------------
# 4. 정적 리소스(css/js 등)는 React 앱에서 바로 응답
# --------------------------------------------
# - React로 빌드된 결과물 (main.js, style.css 등)
# - 빠른 응답을 위해 Nginx가 직접 서빙
# 장점: 백엔드 부하 없이 빠른 로딩 -> 성능 최적화

location ~* \.(css|js|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
    root /var/www/html;
    access_log off;
    expires max;
}

# --------------------------------------------
# 5. SPA 라우팅 처리 → React index.html로 fallback
# --------------------------------------------
# - React는 싱글 페이지 앱이라, 서버에는 실제 경로가 없을 수 있음
# - 그래서 모든 경로를 index.html로 리다이렉트함
# - 예: /mypage, /detail 등도 React 내부 라우팅으로 처리
# 장점: 새로고침해도 라우팅 문제 없음 + UX 안정적 유지

location / {
    root /var/www/html;
    index index.html;
    try_files $uri /index.html;
}

# --------------------------------------------
# 6. HTTP 요청 → HTTPS로 자동 리디렉션
# --------------------------------------------
# - 사용자가 http:// 로 접속하더라도 https:// 로 강제 이동
# - 보안 유지와 Toss 연동을 위해 반드시 필요
# 장점: 모든 접속을 보안 연결로 통일 -> 사용자 신뢰 확보

server {
    listen 80;
    server_name staypick.duckdns.org;
    return 301 https://$host$request_uri;
}
